float get_distance_from_res2(PGresult *res, int i, int j)
{
    float tmp;
    float x1, x2, y1, y2, z1, z2;
    sscanf(PQgetvalue(res, i, 1),"%f",&x1);
    sscanf(PQgetvalue(res, i, 2),"%f",&y1);
    sscanf(PQgetvalue(res, i, 3),"%f",&z1);
    sscanf(PQgetvalue(res, j, 1),"%f",&x2);
    sscanf(PQgetvalue(res, j, 2),"%f",&y2);
    sscanf(PQgetvalue(res, j, 3),"%f",&z2);
    tmp = get_distance(x1, y1, z1, x2, y2, z2);

    return tmp;

}

float get_dc2(float percent, PGresult *res)
{
    int rec_count;

    int n = 0, i, j;
    float dc = 0.0;
    float* distances = NULL;
    int position;

    rec_count = PQntuples(res);
    distances = (float*)malloc(sizeof(float)*rec_count*rec_count);

    for (i = 0, n = 0; i < rec_count; i++) {
          for (j = 0; j < rec_count; j++, n++) {
                distances[n] = get_distance_from_res2(res, i, j);
          }
      }

    //There are rec_count zeros, because distances from itselfs
    position = rec_count*percent/100 -1;//position = rec_count + 2*rec_count*percent/100 -1;
    qsort(distances, rec_count, sizeof(float), &compare);

    dc = distances[position];

    return dc;
}


int get_local_density2(float dc, double* local_density, char kernel[20], PGresult *res)
//TODO: Parameter size
{
    int             rec_count;

    int i, j;
    double distance;

    if (strcmp(kernel, "gaussian") && strcmp(kernel, "cutoff"))
    {
        puts("Kernel parameter must be \"gaussian\" or \"cutoff\".");
        return 1;
    }

    rec_count = PQntuples(res);

    for (i = 0; i < rec_count; i++) local_density[i] = 0;

    if (!strcmp(kernel, "cutoff") )
    {
        for (i = 0; i < rec_count; i++) {
              for (j = i+1; j < rec_count; j++) {
                    distance = get_distance_from_res2(res, i, j);
                    if ( (distance - dc) < 0 )
                    {
                        local_density[i] += 1;
                        local_density[j] += 1;
                    }
              }
          }
    }

    if (!strcmp(kernel, "gaussian") )
    {
        for (i = 0; i < rec_count; i++) {
              for (j = i+1; j < rec_count; j++) {
                    distance = get_distance_from_res2(res, i, j);
                    local_density[i] = local_density[i] + exp(-(distance/dc)*(distance/dc));
                    local_density[j] = local_density[j] + exp(-(distance/dc)*(distance/dc));
              }
          }
    }

    return 0;
}


int get_distance_to_higher_density2(double* rho, double* delta, PGresult *res)
{
    int rec_count;

    double dist;
    double tmp;
    int i, j, k, flag;

    rec_count = PQntuples(res);

    for (i = 0; i < rec_count; i++)
        delta[i] = 0;

    for(i = 0; i < rec_count; i++){
        dist = 0.0;
        flag = 0;
        for(j = 0; j < rec_count; j++){
            if(i == j) continue;
            if(rho[j] > rho[i]){

                tmp = get_distance_from_res2(res, i, j);

                if(!flag){
                    dist = tmp;
                    flag = 1;
                }else dist = tmp < dist ? tmp : dist;
            }
        }
        if(!flag){
            for(k = 0; k < rec_count; k++){
                tmp = get_distance_from_res2(res, i, k);
                dist = tmp > dist ? tmp : dist;
            }
        }
        delta[i] = dist;
    }

    return 0;
}

int get_centers_cluster_dp2(double* centers, double dc, PGresult *res)
{
    int rec_count;

    double* local_density;
    double* distance_to_higher_density;
    double* gamma;
    float meanf;
    int i;

    rec_count = PQntuples(res);

    local_density = (double*)calloc(rec_count,sizeof(double));
    distance_to_higher_density = (double*)calloc(rec_count,sizeof(double));
    gamma = (double*)calloc(rec_count,sizeof(double));

    get_local_density2(dc, local_density, "gaussian", res);
    get_distance_to_higher_density2(local_density, distance_to_higher_density, res);

    Quicksort(distance_to_higher_density, local_density, 0, rec_count-1);

    // gamma is rho*delta
    for(i=0; i<rec_count; i++)
    {
        gamma[i] = i*distance_to_higher_density[i];
    }

    //points > 5*mean are centers of cluster
    meanf = mean(gamma, rec_count);

    centers[0] = 0;
    for(i=0; i<rec_count; i++)
    {
        if (gamma[i] > 2.5*meanf)
        {
            //sscanf(PQgetvalue(res, i, 0),"%lf",&centers[(int)centers[0]+1]);
            centers[(int)centers[0]+1] = i;
            centers[0]++;
        }
    }

    free(local_density);
    free(distance_to_higher_density);
    free(gamma);
    return 0;
    // centers contains index of spike centers, centers[0] is lenght of center
}